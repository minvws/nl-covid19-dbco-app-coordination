openapi: 3.0.1
info:
  title: DBCO App - Backend to GGD Interface
  description: |
    This specification describes the interface between the DBCO app backend and the GGD middleware.    
    
    The interface uses higher-level encryption/decryption, hashing and key exchange
    tools provided by the Sodium library (https://libsodium.gitbook.io/doc/).     
  contact:
    name: Ministerie van Volksgezondheid Welzijn en Sport coordination repository
    url: https://github.com/minvws/nl-covid19-dbco-app-coordination
  license:
    name: European Union Public License v. 1.2
    url: https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/LICENSE.txt
  version: 0.2.0
servers:
  - url: https://tbd.example.com/v1
tags:
  - name: Questions
    description: |
       Retrieving the sets of predefined questions
  - name: Cases
    description: |
      Delivering case data / task results from the client
  - name: Clients
    description: |
      Registering clients.
paths:
  /questionnaires:
    get:
      tags:
        - Questions
      summary: The question lists 
      description: |
         Get the list of questions that need to be asked depending on the tasktype and category.
      parameters: 
        - in: header
          name: Accept-Language
          description: The language in which to retrieve the questionnaires
          schema:
            type: string
          example: "nl-NL"
        - $ref: '#/components/parameters/traceParam'
        - $ref: '#/components/parameters/sentParam'
      operationId: getQuestionnaires
      responses:
        200:
           description: Task types retrieved succesfully
           content: 
             application/json:
               schema:
                 $ref: '#/components/schemas/QuestionnaireListResponse'
                 
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get a generic set of tasks that is user independent.
      description: |
         Get the list of tasks that can be used for all users. This will not be fetched on a per-user basis but only a few times per day, as it 
         is fairly static data that doesn't change often.
      parameters: 
          - $ref: '#/components/parameters/traceParam'
          - $ref: '#/components/parameters/sentParam'
      operationId: getTasks
      responses:
        200:
          description: Tasks retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'

  /cases/{caseId}/clients:
    post:
      tags:
        - Clients
      summary: Pair a patient device to a case
      description: |
        Completes the pairing process between a client device and the health authority. 
        
        The body contains the sealed (base64 encoded) client public key that can be unsealed / decrypted 
        using the Sodium `crypto_box_unseal` and general health authority key pair. The API generates a case 
        specific key pair using the `crypto_kx_keypair` method. The generated public  key should be sealed 
        (encrypted) using the `crypto_box_seal` method and the unsealed client public key.
        
        To complete the key exchange the server can call the `crypto_kx_server_session_keys` method using its
        case specific key pair and the received client public key. This results in a secret key that can be used to
        send/transmit data to the client and a secret key that can be used to read data from the client.
        
        Some API calls require a _token_ for receiving or sending case data. This token is a hexadecimal 
        representation of a hash that can be derived from the concatenated shared secret keys (_tx_ + _rx_) using the 
        `crypto_generichash` method. (This is deliberately the reverse order from how the client generates the hash).
      parameters:
        - name: caseId
          in: path
          description: Case identifier as communicated by the health portal when registering the case for pairing.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/traceParam'
        - $ref: '#/components/parameters/sentParam'
      requestBody:
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/RegisterClientRequest'
        required: true
      responses:
        201:
          description: Device pairing succeeded
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/RegisterClientResponse'        
                
  /cases/{token}:
    put:
      tags:
        - Cases
      summary: Post the tasks (plus results) to the GGD backend
      description: |
        All answers will be updated every time this method is called. The GGD should replace any data that have the same identifier.
        Tasks that originate in the app (source:app), should be created on the GGD side.

        The token is derived from the shared secrets established during the pairing process (see the
        app API spec for more information). The case data is sealed / encrypted using the client's _tx_ shared key
        and can be unsealed / decrypted using the case specific health authority _rx_ shared key.
        
        The case data should follow the scheme '#/components/schemas/CaseBody'.
      parameters:
        - name: token
          in: path
          description: Token derived from the shared secret between client and health authority.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/traceParam'
        - $ref: '#/components/parameters/sentParam'
      operationId: putTasks
      requestBody:
        content:
          application/json: 
            schema: 
             $ref: '#/components/schemas/SealedData'
      responses:
        204:
          description: Data is processed
components:
  parameters:
    traceParam:
      name: DBCO-Trace-Id
      in: header
      description: |
        A unique id generated by the originator of a request. It is passed along the way through all systems so that logging of various components can be related. If request received a traceId header, it should pass on this traceId header to any API call it makes. If it didn't receive one, a new, unique traceId should be generated.
      required: true
      schema:
        type: string
        format: uuid
    sentParam:
      name: DBCO-Sent
      in: header
      description: |
        The date and time that this chain of events started. Typically an end user app will provide the sentAt header when calling an API. The api passes it on to the next API, so that in the deepest of systems we can still know when the original request started.
      required: true
      schema:
        type: string
        format: date-time
  schemas:
    Task:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: A unique id for this task. Used to be able to relate contacts to a task.
          example: 123e4567-e89b-12d3-a456-426614172000
        taskType:
          type: string
          description: Currently only one task types is supported (in the future we might have location tasks too). The taskType determines which standard list of Questions will need to be answered. 
          enum: [contact]
          example: contact
        source: 
          type: string
          description: Did this task originate on the ggd side (during bco conversation) or did the user create this?
          enum: [app,portal]
        label:
          type: string
          description: The (short) label of the task.
          example: Aziz F.
        taskContext:
          type: string
          description: The optional (longer) explanation of the task. 
          example: The goalkeeper of your football match
        category:
          type: string
          description: The BCO category for this task.
          enum: ['1', '2a', '2b', '3']
        dateOfLastExposure: 
          type: string
          description: When was the index last exposed to this contact? We limit the possible selections to dates within the contagious period. If the last meeting was earlier, the app should fill this field with the value 'earlier'. Otherise, with a valid date.
          example: "2020-09-02"
        communication:
          type: string
          description: identifies who will inform this contact (the user, the BCO staff, or if no communication is necessary)
          enum: ['index', 'staff', 'none']
        priority:
          type: boolean
          description: identifies that this contact should be contacted with priority
          example: false
        questionnaireResult:
          $ref: '#/components/schemas/QuestionnaireResult' 
        informedByIndex: 
          type: boolean
          description: "If the index informed the contact, this should be set to true"
          example: true
        deletedByIndex: 
           type: boolean 
           description: the index decided to delete this contact. The server should delete the data associated to this task. 
           example: false
      required: 
        - uuid
        - taskType
        - source
        - label
    Answer:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: a unique id for this answer. Generated by the device. If a user updates a contact later, this id will be preserved so that the data can be updated.
          example: 123e4567-e89b-12d3-a456-426614174000
        lastModified:
          type: string
          format: date-time
          description: | 
            The moment this contact was last modified. (Note: this is device generated so may be off due to clock skew, however future updates would have the same skew, so the date can still be used to see that an item was modified)
          example: "2017-07-21T17:32:28Z"
        questionUuid: 
          type: string
          format: uuid
          description: The question that lead to this entry. 
          example: 123e4567-e89b-12d3-a456-426614172000
        value:
          type: object
          anyOf: 
            - $ref: '#/components/schemas/SimpleValue'
            - $ref: '#/components/schemas/ClassificationDetails'
            - $ref: '#/components/schemas/ContactDetails'
            - $ref: '#/components/schemas/ContactDetailsFull'
          description: The answer value 
          example: John
      required: 
        - uuid
        - questionUuid
        - lastModified
        - value
    Question:
      type: object
      properties:
        uuid: 
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614176000
        group:
          type: string
          description: The group determines in which of the 3 sections this question should appear.
          enum: [classification, contactdetails, other]
          example: contactdetails
        questionType: 
          type: string
          description: |
            The type of question. A contactdetails type question is a block of fields with contact details (Dutch: naw gegevens) such as firstname, lastname, phone, email. contactdetails_full is the same but includes physical address fields. A classification object has a fixed set of questions that determine the 'nature of the contact'
          enum: [open,classificationdetails,contactdetails,contactdetails_full,multiplechoice,date,text]
          example: contactdetails
        label:
          type: string
          description: The short name of the question
          example: Please provide contact details
        description:
          type: string
          description: An optional, longer description
          example: We use the provided details to combat the epidemic 
        relevantForCategories:
          type: array
          items:
            type: object
            properties:
              category:
                type: string 
                enum: ['1', '2a', '2b', '3']
          description: Depending on the category of a task (either predefined at task level, or based on classificationdetails object), the app can determine which question to ask.
        answerOptions: 
          type: array
          description: If the question is multiplechoice, this provides the possible answers.
          items: 
            $ref: '#/components/schemas/AnswerOption'
      required: 
        - uuid
        - questionType
        - label
    SimpleValue:
      type: object
      properties: 
        value: 
          type: string
    ClassificationDetails:
      type: object
      properties:
        category1Risk: 
          type: boolean
          description: Person in same household or longer than x hours in same house
        category2ARisk:
          type: boolean
          description: Person was in vicinity longer than 15 minutes
        category2BRisk:
          type: boolean
          description: Person was within 1.5m
        category3Risk:
          type: boolean
          description: Person was at risk (kissed, etc)
    ContactDetails:
      type: object
      properties:
        firstName:
          type: string
          description: The first name of the contact
          example: John
        lastName:
          type: string
          description: The last name of the contact
          example: Doe
        phoneNumber: 
          type: string
          description: The phone number of the contact
          example: +31612345678
        email: 
          type: string
          format: email
          description: The email address of the contact
          example: john@doe.com
    ContactDetailsFull:
      type: object
      allOf: 
        - $ref: '#/components/schemas/ContactDetails'
        - properties: 
            address1: 
              type: string
              example: Dorpsstraat
            houseNumber: 
              type: string
              example: 13A
            address2:
              type: string
              example: Drie-hoog achter
            zipcode: 
              type: string
              example: 1234AA
            city: 
              type: string
              example: Ons Dorp
    QuestionnaireListResponse:
      type: object
      required: 
        - questionnaires
      properties: 
        questionnaires: 
          description: The questionnaires
          type: array
          items: 
            $ref: '#/components/schemas/Questionnaire'
    Questionnaire:
      type: object
      required:
        - questions
        - taskType
        - uuid
      properties:
        uuid:
          type: string
          format: uuid
        taskType:
          type: string
          description: Depending on the taskType of a task, the app can determine which questionnaire to ask.
          enum: [contact]
          example: contact
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question' 
    QuestionnaireResult:
      type: object
      description: |
        The answers to the questionnaire. NOTE: The backend should never return the answers. QuestionnaireResult will be null when a task travels from portal to app.
      required:
        - answers  
        - questionnaireUuid
      properties:
        questionnaireUuid:
          type: string
          format: uuid
          description: The questionnaire this question is from.
        answers:
          type: array
          items: 
             $ref: '#/components/schemas/Answer'
          description: The answers
    CaseBody:
      type: object
      required:
        - case
      properties:
        case:
          $ref: '#/components/schemas/Case'
    AnswerOption:
      type: object
      required: 
        - label
        - value
      properties:
        label: 
          type: string
          description: The human readable label for this option
          example: 'Binnen de 15 meter'
        value:
          type: string
          description: The value that gets sent as actual answer
          example: '<15m'
        trigger:
          type: string
          description: |
            Some answers lead to specific actions/business rules in the app. If a trigger is configured, the trigger should be executed when this answer is chosen. Currently supported: 
              * communication_index: if this answer is chosen set the task's communication option to 'index'
              * communication_staff: if chosen, set the tasks's communication option to 'staff'
              * priority: if this answer option is chosen, the task's priority field should be set to true.
          enum: [communication_index,communication_staff,priority]
    Case:
      type: object
      properties:
        dateOfSymptomOnset:
          description: The date that the index started having symptoms.
          type: string
          format: date
          example: "2020-09-01"
        windowExpiresAt:
          description: The moment until when the user can deliver data.
          type: string
          format: date-time
          example: "2020-09-02T10:00:00Z"
        tasks:
          description: The tasks of this case
          type: array
          items:
            $ref: '#/components/schemas/Task'
    TaskList:
      type: object
      properties:
        tasks: 
          type: array
          items: 
            $ref: '#/components/schemas/Task'
    RegisterClientRequest:
      type: object
      required: 
        - pairingCode
        - sealedClientPublicKey
      properties:
        sealedClientPublicKey:
          $ref: '#/components/schemas/SealedData'
          description: With the (in the client embedded) general health authority public key encrypted client public key.                
    RegisterClientResponse:
      type: object
      required: 
        - sealedHealthAuthorityPublicKey
      properties:
        sealedHealthAuthorityPublicKey:
          $ref: '#/components/schemas/SealedData'
          description: With the client public key encrypted public key of the health authority specific for this case / client.    
          
    SealedData:        
      type: object
      required:
        - ciphertext
        - nonce
      properties:
        ciphertext:
          type: string
          description: Encrypted payload        
        nonce:
          type: string
          description: Nonce used for the encryption                 
