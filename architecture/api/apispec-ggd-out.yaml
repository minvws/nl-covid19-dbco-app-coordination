openapi: 3.0.1
info:
  title: DBCO App - Backend to GGD Interface
  description: |
    This specification describes the interface between the DBCO app backend and the GGD middleware.    
  contact:
    name: Ministerie van Volksgezondheid Welzijn en Sport coordination repository
    url: https://github.com/minvws/nl-covid19-dbco-app-coordination
  license:
    name: European Union Public License v. 1.2
    url: https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/LICENSE.txt
  version: 0.1.0
servers:
  - url: https://tbd.example.com/v1
tags:
  - name: Questions
    description: |
       Retrieving the sets of predefined questions
  - name: Tasks
    description: |
      Retrieving tasks
  - name: Results
    description: |
      Delivering data 
paths:
  /questionnaires:
    get:
      tags:
      - Questions
      summary: The question lists 
      description: |
         Get the list of questions that need to be asked depending on the tasktype and category.
      parameters: 
      - in: header
        name: Accept-Language
        description: The language in which to retrieve the questionnaires
        schema:
          type: string
        example: "nl-NL"
      operationId: getQuestionnaires
      responses:
        200:
           description: Task types retrieved succesfully
           content: 
             application/json:
               schema:
                 $ref: '#/components/schemas/QuestionnaireListResponse'
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get a generic set of tasks that is user independent.
      description: |
         Get the list of tasks that can be used for all users. This will not be fetched on a per-user basis but only a few times per day, as it is fairly static data that doesn't change often.
      operationId: getTasks
      responses:
        200:
          description: Tasks retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
  /cases/{caseId}/tasks:
    get:
      tags:
        - Tasks
      summary: Get a user specific set of tasks.
      description: |
         Get the list of tasks for a specific BCO case. This will be fetched on a per-user basis.
      parameters:
        - name: caseId
          in: path
          description: caseId to retrieve the tasks for
          required: true
          schema:
            type: string
      operationId: getTasksByCase
      responses:
        200:
          description: Tasks retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseBody'
    put:
      tags:
        - Tasks
      summary: Post the tasks (plus results) to the GGD backend
      description: |
        All answers will be updated every time this method is called. The GGD should replace any data that have the same identifier.
        Tasks that originate in the app (source:app), should be created on the GGD side.
        The response will be entirely encrypted with a public key. This is not reflected in the swagger docs to keep the objects readable.    
      parameters:
        - name: caseId
          in: path
          description: caseId that these contacts belong to
          required: true
          schema:
            type: string
      operationId: putTasks
      requestBody:
        content:
          application/json: 
            schema: 
             $ref: '#/components/schemas/CaseBody'
      responses:
        202:
          description: Data will be processed
components:
  schemas:
    Task:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: A unique id for this task. Used to be able to relate contacts to a task.
          example: 123e4567-e89b-12d3-a456-426614172000
        taskType:
          type: string
          description: Currently only one task types is supported (in the future we might have location tasks too). The taskType determines which standard list of Questions will need to be answered. 
          enum: [contact]
          example: contact
        source: 
          type: string
          description: Did this task originate on the ggd side (during bco conversation) or did the user create this?
          enum: [app,portal]
        label:
          type: string
          description: The (short) label of the task.
          example: Aziz F.
        taskContext:
          type: string
          description: The optional (longer) explanation of the task. 
          example: The goalkeeper of your football match
        category:
          type: string
          description: The BCO category for this task.
          enum: ['1', '2a', '2b', '3']
        dateOfLastExposure: 
          type: string
          format: date
          example: "2020-09-02"
        communication:
          type: string
          description: identifies who will inform this contact (the user, the BCO staff, or if no communication is necessary)
          enum: ['index', 'staff', 'none']
        questionnaireResult:
          $ref: '#/components/schemas/QuestionnaireResult' 
        informedByIndex: 
          type: boolean
          description: "If the index informed the contact, this should be set to true"
          example: true
      required: 
        - uuid
        - taskType
        - source
        - label
    Answer:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: a unique id for this answer. Generated by the device. If a user updates a contact later, this id will be preserved so that the data can be updated.
          example: 123e4567-e89b-12d3-a456-426614174000
        lastModified:
          type: string
          format: date-time
          description: | 
            The moment this contact was last modified. (Note: this is device generated so may be off due to clock skew, however future updates would have the same skew, so the date can still be used to see that an item was modified)
          example: "2017-07-21T17:32:28Z"
        questionUuid: 
          type: string
          format: uuid
          description: The question that lead to this entry. 
          example: 123e4567-e89b-12d3-a456-426614172000
        value:
          type: object
          anyOf: 
            - $ref: '#/components/schemas/SimpleValue'
            - $ref: '#/components/schemas/ClassificationDetails'
            - $ref: '#/components/schemas/ContactDetails'
            - $ref: '#/components/schemas/ContactDetailsFull'
          description: The answer value 
          example: John
      required: 
        - uuid
        - questionUuid
        - lastModified
        - value
    Question:
      type: object
      properties:
        uuid: 
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614176000
        group:
          type: string
          description: The group determines in which of the 3 sections this question should appear.
          enum: [classification, contactdetails, other]
          example: contactdetails
        questionType: 
          type: string
          description: |
            The type of question. A contactdetails type question is a block of fields with contact details (Dutch: naw gegevens) such as firstname, lastname, phone, email. contactdetails_full is the same but includes physical address fields. A classification object has a fixed set of questions that determine the 'nature of the contact'
          enum: [open,classificationdetails,contactdetails,contactdetails_full,multiplechoice,date,text]
          example: contactdetails
        label:
          type: string
          description: The short name of the question
          example: Please provide contact details
        description:
          type: string
          description: An optional, longer description
          example: We use the provided details to combat the epidemic 
        relevantForCategories:
          type: array
          items:
            type: object
            properties:
              category:
                type: string 
                enum: ['1', '2a', '2b', '3']
          description: Depending on the category of a task (either predefined at task level, or based on classificationdetails object), the app can determine which question to ask.
        answerOptions: 
          type: array
          description: If the question is multiplechoice, this provides the possible answers.
          items: 
            $ref: '#/components/schemas/AnswerOption'
      required: 
        - uuid
        - questionType
        - label
    SimpleValue:
      type: object
      properties: 
        value: 
          type: string
    ClassificationDetails:
      type: object
      properties:
        livedTogetherRisk: 
          type: boolean
          description: Person in same household or longer than x hours in same house
        durationRisk:
          type: boolean
          description: Person was in vicinity longer than 15 minutes
        distanceRisk:
          type: boolean
          description: Person was within 1.5m
        otherRisk:
          type: boolean
          description: Person was at risk (kissed, etc)
    ContactDetails:
      type: object
      properties:
        firstName:
          type: string
          description: The first name of the contact
          example: John
        lastName:
          type: string
          description: The last name of the contact
          example: Doe
        phoneNumber: 
          type: string
          description: The phone number of the contact
          example: +31612345678
        email: 
          type: string
          format: email
          description: The email address of the contact
          example: john@doe.com
    ContactDetailsFull:
      type: object
      allOf: 
        - $ref: '#/components/schemas/ContactDetails'
        - properties: 
            address1: 
              type: string
              example: Dorpsstraat
            houseNumber: 
              type: string
              example: 13A
            address2:
              type: string
              example: Drie-hoog achter
            zipcode: 
              type: string
              example: 1234AA
            city: 
              type: string
              example: Ons Dorp
    QuestionnaireListResponse:
      type: object
      required: 
        - questionnaires
      properties: 
        questionnaires: 
          description: The questionnaires
          type: array
          items: 
            $ref: '#/components/schemas/Questionnaire'
    Questionnaire:
      type: object
      required:
        - questions
        - taskType
        - uuid
      properties:
        uuid:
          type: string
          format: uuid
        taskType:
          type: string
          description: Depending on the taskType of a task, the app can determine which questionnaire to ask.
          enum: [contact]
          example: contact
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question' 
    QuestionnaireResult:
      type: object
      description: |
        The answers to the questionaire. NOTE: The backend should never return the answers. QuestionnaireResult will be null when a task travels from portal to app.
      required:
        - answers  
        - questionnaireUuid
      properties:
        questionaireUuid:
          type: string
          format: uuid
          description: The questionnaire this question is from.
        answers:
          type: array
          items: 
             $ref: '#/components/schemas/Answer'
          description: The answers
    CaseBody:
      type: object
      required:
        - case
      properties:
        case:
          $ref: '#/components/schemas/Case'
    AnswerOption:
      type: object
      required: 
        - label
        - value
      properties:
        label: 
          type: string
          description: The human readable label for this option
          example: 'Binnen de 15 meter'
        value:
          type: string
          description: The value that gets sent as actual answer
          example: '<15m'
        trigger:
          type: string
          description: |
            Some answers lead to specific actions in the app. If a trigger is configured, the trigger should be executed when this answer is chosen. Currently supported: 
              * communication_index: if this answer is chosen set the task's communication option to 'index'
              * communication_staff: if chosen, set the tasks's communication option to 'staff'
          enum: [communication_index,communication_staff]
    Case:
      type: object
      properties:
        dateOfSymptomOnset:
          description: The date that the index started having symptoms.
          type: string
          format: date
          example: "2020-09-01"
        tasks:
          description: The tasks of this case
          type: array
          items:
            $ref: '#/components/schemas/Task'
    TaskList:
      type: object
      properties:
        tasks: 
          type: array
          items: 
            $ref: '#/components/schemas/Task'
