openapi: 3.0.1
info:
  title: DBCO App - App to backend interface
  description: |
    This specification describes the interface between the app and the app backend. 
    
    The interface uses higher-level encryption/decryption, hashing and key exchange
    tools provided by the Sodium library (https://libsodium.gitbook.io/doc/). 
  contact:
    name: Ministerie van Volksgezondheid Welzijn en Sport coordination repository
    url: https://github.com/minvws/nl-covid19-dbco-app-coordination
  license:
    name: European Union Public License v. 1.2
    url: https://github.com/minvws/nl-covid19-notification-app-coordination/blob/master/LICENSE.txt
  version: 0.3.0
servers:
  - url: https://tbd.example.com/v1
tags:
  - name: Configs
    description: Retrieving app config
  - name: Questions
    description: Generic questionnaires
  - name: Tasks
    description: Generic tasks
  - name: Pairings
    description: Pairing device
  - name: Cases
    description: Retrieving and delivering case tasks / data
paths:
  /config:
    get:
      summary: Get the configuration for the app
      description: |
        The configuration contains all configuration items relevant to the app.  
        This resource should be fetched when the app is started or returns from
        the background. 
      tags:
        - Configs
      responses:
        200:
          description: Config retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
  /questionnaires:
    get:
      tags: 
        - Questions
      summary: Retrieve the most recent questionnaires
      responses:
        200:
          description: Questionnaires retrieved succesfully
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/QuestionnaireListResponse'                
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get a generic set of tasks that is user independent.
      description: |
         Get the list of tasks that can be used for all users. This will not be fetched on a per-user basis but 
         only a few times per day, as it is fairly static data that doesn't change often.
      responses:
        200:
          description: Tasks retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
  /pairings:
    post:
      summary: Pair a patient device to a case
      description: |
        This method is used from a device / client to authorize / pair a case registered earlier by a caregiver through
        the DBCO portal. The caregiver will communicate the pairing code out-of-band to the user, for example
        through a phone call or text message. The user will then enter the code inside the app after which this method
        is called. The provided encrypted client public key will be used to establish a shared secret between client
        and health authority using the Elliptic Curve Diffie-Hellman Ephemeral (ECDHE) agreement protocol.
        
        The client key pair should be generated using the Sodium `crypto_kx_keypair` method. The generated public 
        key should be sealed (encrypted) using the `crypto_box_seal` method and the general health authority (GGD)
        public key that is bundled with the app / client.
        
        The sealed health authority public key in the response can be unsealed (decrypted) using the 
        `crypto_box_seal_open` method and the earlier generated client key pair. 
        
        To complete the key exchange the client can call the `crypto_kx_client_session_keys` method using its
        client key pair and the received case / client specific health authority public key. This results in
        a secret key that can be used to send/transmit data to the server and a secret key that can be used to
        read data from the server.
        
        Some API calls require a _token_ for receiving or sending case data. This token is a hexadecimal 
        representation of a hash that can be derived from the concatenated shared secret keys (_rx_ + _tx_) using the 
        `crypto_generichash` method.
      tags:
        - Pairings
      requestBody:
        content:
          application/json: 
            schema: 
              $ref: '#/components/schemas/PairingRequest'
        required: true
      responses:
        201:
          description: Device pairing succeeded
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/PairingResponse'
  /cases/{token}:
    get:
      tags:
        - Cases
      summary: Get a user specific set of tasks and other case data.
      description: |
         Get the list of tasks for a specific BCO case. This will be fetched on a per-user basis.
         
         The token is derived from the shared secrets established during the pairing process. The
         returned case data can be unsealed / decrypted using the _rx_ shared key.
      parameters:
        - name: token
          in: path
          description: Token derived from the shared secret between client and health authority.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Tasks retrieved succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'
    put:
      tags:
        - Cases
      summary: Post the results of the tasks to the health authority backend.
      description: |
        All answers will be updated every time this method is called. The health authority should replace 
        any data that have the same identifier. 
        
        The token is derived from the shared secrets established during the pairing process. The
        case data should be sealed / encrypted using the /tx/ shared key.
      parameters:
        - name: token
          in: path
          description: Token derived from the shared secret between client and health authority.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json: 
            schema: 
             $ref: '#/components/schemas/CaseSubmitRequest'
      responses:
        202:
          description: Data accepted for processing           
components:
  schemas:
    ConfigResponse:
      type: object
      properties:
        androidMinimumVersion:
          type: integer
          description: |
            The minimum supported version of the Android app. The app has a build version number that is increased by 1 on each app release. Whenever the app downloads the manifest, it must compare its own version number with that of the manifest. If the version number is less than the manifest value, the user will be asked to upgrade the app from the app store.
          format: int64
          example: 123
        androidMinimumVersionMessage:
          type: string
          description: |
            If set, the app should not tell the user to upgrade, but display this message to the user instead. It will help us migrate from ad hoc tests to the store version.
          example: The test is over, please download a new version from the store.
        iOSMinimumVersion:
          type: string
          description: |
             The minimum supported version of the iOS app. The app has a build version number (major.minor.patch) that is increased on each app release. Whenever the app downloads the manifest, it must 
             compare its own version number with that of the manifest. If the version number is less than the manifest value, the user will be asked to upgrade the app from the app store. 
          example: 1.2.0
        iOSMinimumVersionMessage:
          type: string
          description: |
            If set, the app should not tell the user to upgrade, but display this message to the user instead. It will help us migrate from ad hoc tests to the store version.
          example: The test is over, please download a new version from the store.
        iOSAppStoreURL:
          type: string
          description: If set, the upgrade dialog can link to the app store url using this link.
          example: "https://appsto.re/...."
          
    QuestionnaireListResponse:
      $ref: 'apispec-ggd-out.yaml#/components/schemas/QuestionnaireListResponse'      
      
    TaskListResponse:
      $ref: 'apispec-ggd-out.yaml#/components/schemas/TaskList'
      
    PairingRequest:
      type: object
      required: 
        - pairingCode
        - sealedClientPublicKey
      properties:
        pairingCode: 
          type: string
        sealedClientPublicKey:
          $ref: '#/components/schemas/SealedData'
          description: With the (in the client embedded) general health authority public key encrypted client public key.                
    PairingResponse:
      type: object
      required: 
        - sealedHealthAuthorityPublicKey
      properties:
        sealedHealthAuthorityPublicKey:
          $ref: '#/components/schemas/SealedData'
          description: With the client public key encrypted public key of the health authority specific for this case / client.    
          
    CaseResponse:
      type: object
      required: 
        - sealedCase
      properties:
        sealedCase:
          $ref: '#/components/schemas/SealedData'
          description: Encrypted case data using the 'apispec-ggd-out.yaml#/components/schemas/CaseBody' schema.      
             
    CaseSubmitRequest:
      type: object
      required: 
        - sealedCase
      properties:
        sealedCase:
          $ref: '#/components/schemas/SealedData'
          description: Encrypted case data using the 'apispec-ggd-out.yaml#/components/schemas/CaseBody' schema.
          
    SealedData:        
      type: object
      required:
        - ciphertext
        - nonce
      properties:
        ciphertext:
          type: string
          description: Encrypted payload        
        nonce:
          type: string
          description: Nonce used for the encryption